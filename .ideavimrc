let mapleader = "\\"

set ignorecase
set smartcase
set visualbell
set gdefault
set incsearch
set scrolloff=6
set sidescrolloff=6
set scrolljump=6
set timeoutlen=5000
set clipboard^=unnamedplus
set relativenumbers

" Plugins
set ideastrictmode
set surround
set ideajoin
set multiple-cursors
set NERDTree
set which-key
set ReplaceWithRegister
set argtextobj
set exchange
set textobj-entire
set highlightedyank
set vim-paragraph-motion
set textobj-indent
set matchit
" set quickscope

nmap <C-x> <Action>(CloseContent)
nmap <leader><C-x> <Action>(CloseAllEditors)
nmap <C-b> :NERDTree<CR>

nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)

nmap <CR> o<Esc>O
nmap <A-c> \"_ciw

nmap <C-j> <Action>(PreviousTab)
nmap <C-k> <Action>(NextTab)

nmap <C-h> <Action>(MethodUp)
nmap <C-l> <Action>(MethodDown)

map <A-k> <Action>(MoveLineUp)
map <A-j> <Action>(MoveLineDown)

nmap <C-A-h> <Action>(MoveStatementUp)
nmap <C-A-l> <Action>(MoveStatementDown)

nmap <A-h> <Action>(VcsShowPrevChangeMarker)
nmap <A-l> <Action>(VcsShowNextChangeMarker)

nmap <leader>rh <Action>(Vcs.RollbackChangedLines)
nmap <leader>rb <Action>(ChangesView.Revert)
nmap <leader>ph <Action>(VcsShowCurrentChangeMarker)
nmap <leader>fs <Action>(FileStructurePopup)
nmap <leader>ch <Action>(CallHierarchy)

nmap U <Action>($Redo)
nmap Q <Action>(CloseProject)

nmap <C-w>- <Action>(SplitHorizontally)
nmap <C-w>\| <Action>(SplitVertically)
nmap <C-w>z <Action>(MaximizeEditorInSplit)

nmap <C-w><C-k> <Action>(StretchSplitToTop)
nmap <C-w><C-j> <Action>(StretchSplitToBottom)
nmap <C-w><C-h> <Action>(StretchSplitToLeft)
nmap <C-w><C-l> <Action>(StretchSplitToRight)
nmap <leader>zc <Action>(CollapseAllRegions)
nmap <leader>zo <Action>(ExpandAllRegions)

nmap <C-\> <Action>(NextSplitter)
nmap <C-S-\> <Action>(PrevSplitter)
nmap <C-=> <Action>(UnsplitAll)

map <leader><A-n> <Action>(SelectAllOccurrences)
map <C-c> <Esc>

map <leader>rc <Action>(Refactorings.QuickListPopupAction)
map <leader>ri <Action>(Inline)
map <leader>= <Action>(ReformatCode)
map <leader>oi <Action>(OptimizeImports)
map <leader>iv <Action>(IntroduceVariable)

map <leader>rf <Action>(RecentFiles)
map <leader>rl <Action>(RecentLocations)
map <leader>sh <Action>(LocalHistory.ShowHistory)

vnoremap < <gv
vnoremap > >gv

nmap <leader>tp <Action>(PinActiveTab)
nmap <leader>rn <Action>(RenameElement)
nmap <leader>ca <Action>(ShowIntentionActions)
nmap <leader>tz <Action>(ToggleZenMode)
nmap <leader>tf <Action>(ToggleFullScreen)
nmap <leader>fu <Action>(FindUsages)

nmap <leader>gc <Action>(GotoClass)
nmap gi <Action>(GotoImplementation)
nmap gd <Action>(GotoTypeDeclaration)
nmap gD <Action>(GotoDeclaration)
nmap gsm <Action>(GotoSuperMethod)
nmap gt <Action>(GotoTest)
nmap gb <Action>(Back)
nmap gf <Action>(Forward)

nmap <A-i> <Action>(Rerun)
nmap <leader>rc <Action>(RunClass)
nmap <leader>rft <Action>(RerunFailedTests)

nmap <leader>gn <Action>(Generate)

nmap <leader>so :so ~/.ideavimrc<CR>
nmap <leader>se :e ~/.ideavimrc<CR>

map <leader>sw <Action>(SurroundWith)
map <leader>em <Action>(ExtractMethod)

nmap <leader>vp <Action>(Vcs.QuickListPopupAction)
nmap <leader>vh <Action>(Vcs.ShowTabbedFileHistory)

nmap <leader>im <Action>(ImplementMethods)
nmap <leader>om <Action>(OverrideMethods)
nmap <leader>nc <Action>(NewClass)

nmap <leader>fr <Action>(RenameFile)
nmap <leader>fc <Action>(CopyElement)
nmap <leader>fm <Action>(Move)
nmap gp `[v`]

nmap <C-S-j> i<Esc>"ryy"rp`^j
nmap <C-S-k> i<Esc>"ryy"rp`^

vmap <C-S-j> <Action>(EditorDuplicateLines)
vmap <C-S-k> "ry`>"rpgv

nmap <A-d> "_dd
xmap <A-d> "_dd
vmap <A-d> "_d

nmap <C-a> gg
nmap <C-p> <Action>(GotoFile)
imap <C-l> <Action>(copilot.applyInlays)

nmap <S-A-j> <Action>(EditorCloneCaretBelow)
nmap <S-A-k> <Action>(EditorCloneCaretAbove)

nmap <leader>, HvL
nmap <C-A-k> :tabm+1<CR>
nmap <C-A-j> :tabm-1<CR>
nmap <C-s> <Action>(SaveDocument)

nmap <leader>pc <Action>(CheckinProject)
nmap <leader>of <Action>(SelectInProjectView)
nmap <leader>lg <Action>(FindInPath)

map <A-w> ysiw)i
vmap <A-y> <Action>($Copy)<Esc>

map L $
map H ^
vmap $ $h

imap <C-S-v> <Action>(EditorPaste)

function! AppendScAnd(char)
  return function!() " Todo: Check for ; presence
      return '<Esc>A;<Esc>' .. a:char
  end
endfunction

imap <expr> <C-j> AppendScAnd('o')
imap <expr> <C-S-j> AppendScAnd('O')
imap <C-k> <Esc>mdA;<Esc>`da

nmap <leader>ra <Action>(Run)
nmap <leader>rd <Action>(Debug)
nmap <leader>ps <Action>(ShowProjectStructureSettings)

nmap <C-a> gg}O
nmap <A-a> ggO<Esc>O

nmap <leader>nn <Action>(NewElement)
nmap <leader>nf <Action>(NewFile)
nmap <leader>nd <Action>(NewDir)
nmap <leader>nc <Action>(NewClass)
nmap <leader>nm <Action>(NewModule)
nmap <leader>np <Action>(NewProject)

nmap <leader>cap <Action>(CopyAbsolutePath)
nmap <leader>cfn <Action>(CopyFileName)
nmap <leader>erc <Action>(editRunConfigurations)
nmap <leader>pr <Action>(ExternalSystem.ProjectRefreshAction)

" Delete to _

noremap s "_s
noremap x "_x

nmap d] V}"_d
nmap d[ V{"_d

nmap <leader>dat dat"_dd
nmap <leader>dap "_dap

nmap <leader>db V$%"_d
nmap <leader>cb V$%"_c

nmap <leader>S "_S
nmap <leader>C "_C

nmap <leader>dii "_dii
nmap <leader>cii "_cii

nmap <leader>di( "_di(
nmap <leader>di) "_di)

nmap <leader>ci( "_ci(
nmap <leader>ci) "_ci)

nmap <leader>dia "_dia
nmap <leader>daa "_daa

" Comment

nmap gcip vip<Action>(CommentByLineComment)<Esc>

nmap gci( vi(<Action>(CommentByBlockComment)<Esc>
nmap gci) vi)<Action>(CommentByBlockComment)<Esc>

nmap gcia via<Action>(CommentByBlockComment)<Esc>
nmap gcaa vaa<Action>(CommentByBlockComment)<Esc>

nmap gcii vii<Action>(CommentByLineComment)<Esc>

" Correct word deletion

imap <C-w> <Action>(EditorDeleteToWordStart)

nmap <leader>cl :echo line(".") + 1<cr>
nmap Y y$

nmap <leader>ta <Action>(HideAllWindows)
nmap <leader>jl <Action>(JumpToLastWindow)

nmap <leader>tb <Action>(ToggleLineBreakpoint)

nmap gk <Action>(ShowErrorDescription)
nmap <leader>ct  <Action>(ChangeLaf)

nmap <leader>od <Action>(ActivateDatabaseToolWindow)
nmap <leader>td <Action>(ToggleRenderedDocPresentation)

if has('ide')
    if &ide =~? 'Android Studio'
        nmap <leader>ac <Action>(android.deploy.ApplyChanges)
        nmap <leader>cs <Action>(android.deploy.CodeSwap)
    elseif &ide =~? 'PhpStorm'
        nmap <leader>nc <Action>(PhpNewClass)
    elseif &ide =~? 'IntelliJ IDEA'
        "
    endif
endif
